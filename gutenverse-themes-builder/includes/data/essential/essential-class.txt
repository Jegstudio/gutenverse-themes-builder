<?php
/**
 * Essential Class
 *
 * @author {{author_name}}
 * @package {{slug}}
 */

namespace {{namespace}};

use WP_Block_Type_Registry;

/**
 * Class Init
 *
 * @package {{slug}}
 */
class Essential {
	/**
	 * Instance of Essential.
	 *
	 * @var Essential
	 */
	protected static $instance;

	/**
	 * Hold instance of assets
	 *
	 * @var Assets
	 */
	public $assets;

	/**
	 * Style Generator
	 *
	 * @var Style_Generator
	 */
	public $style_generator;

	/**
	 * Instance of Blocks.
	 *
	 * @var Blocks
	 */
	protected $blocks;

	/**
	 * API
	 *
	 * @var API
	 */
	public $api;

	/**
	 * Singleton page for Essential Class
	 *
	 * @return Essential
	 */
	public static function instance() {
		if ( null === static::$instance ) {
			static::$instance = new static();
		}

		return static::$instance;
	}

	/**
	 * Essential constructor.
	 */
	private function __construct() {
		$this->init_hook();
	}

	/**
	 * Initialize Class.
	 */
	public function init_class() {
		if( ! class_exists('\Gutenverse\Pro\License') ){
			$this->blocks = new Blocks();
			$this->style_generator = new Style_Generator();
		}
		$this->assets          = new Assets();
		$this->api             = new Api();
	}

	/**
	 * Init Hook
	 */
	public function init_hook() {
		add_action( 'gutenverse_after_init_framework', array( $this, 'init_class' ) );
		add_action( 'plugins_loaded', array( $this, 'allow_local' ) );
		add_filter( 'upload_mimes', array( $this, 'add_to_allowed_mimes' ) );
		add_filter( 'wp_check_filetype_and_ext', array( $this, 'update_mime_types' ), 10, 3 );
	}

	/**
	 * Allow Local Hosted File.
	 */
	public function allow_local() {
		add_filter(
			'http_request_host_is_external',
			function () {
				return true;
			}
		);
	}

	/**
	 * Add mime type
	 *
	 * @param array $mimes .
	 *
	 * @return array $mimes
	 */
	public function add_to_allowed_mimes( $mimes ) {
		$mimes['json'] = 'application/json';
		$mimes['svg']  = 'image/svg+xml';
		return $mimes;
	}

	/**
	 * Update mime type
	 *
	 * @param array  $defaults .
	 * @param array  $file .
	 * @param string $filename .
	 */
	public function update_mime_types( $defaults, $file, $filename ) {
		if ( 'json' === pathinfo( $filename, PATHINFO_EXTENSION ) ) {
			$defaults['type'] = 'application/json';
			$defaults['ext']  = 'json';
		}
		if ( 'svg' === pathinfo( $filename, PATHINFO_EXTENSION ) ) {
			$defaults['type'] = 'image/svg+xml';
			$defaults['ext']  = 'svg';
		}

		return $defaults;
	}
}
