<?php
/**
 * API
 *
 * @author {{author_name}}
 * @package {{slug}}
 */

namespace {{namespace}};

use WP_REST_Response;

/**
 * Class API
 *
 * @package {{slug}}
 */
class Api {
	/**
	 * Api constructor.
	 */
	public function __construct() {

		add_action( 'rest_api_init', array( $this, 'register_routes' ) );
	}

	/**
	 * Register Jeg Theme Essence APIs
	 */
	public function register_routes() {
		register_rest_route(
			'gutenverse-essence/v1',
			'/gutenverse-essence-proxy',
			array(
				'methods'  => 'POST',
				'callback' => array( $this, 'essence_proxy' ),
				'permission_callback' => '__return_true',
			)
		);
	}

	/**
	 * Essence Proxy
	 */
	public function essence_proxy( $request ) {
		$url    = $this->esc_data( $request->get_param( 'url' ) );
		$body   = $this->esc_data( (array) $request->get_param( 'body' ), 'array' );
		$method = $this->esc_data( $request->get_param( 'method' ) );
		$response = wp_remote_request(
			$url,
			array(
				'method'  => strtoupper( $method ),
				'body'    => $body ? json_encode( $body ) : $body,
				'headers' => array(
					'Content-Type' => 'application/json',
				),
			)
		);

		if ( is_wp_error( $response ) ) {
			return new WP_REST_Response(
				array(
					'active' => false,
					'status' => 'failed',
				),
				400
			);
		}

		$external_api_body = wp_remote_retrieve_body( $response );
		return rest_ensure_response( json_decode( $external_api_body ) );
	}
    /**
	 * Escape data
	 *
	 * @param mixed $value .
	 * @param mixed $type .
	 *
	 * @return mixed
	 */
	public function esc_data( $value, $type = 'string' ) {
		if ( ! $value ) {
			return false;
		}
		switch ( $type ) {
			case 'string':
				return esc_html( sanitize_text_field( wp_unslash( $value ) ) );
			case 'integer':
			case 'int':
				return (int) $value;
			case 'float':
			case 'double':
				return (float) $value;
			case 'boolean':
			case 'bool':
				return (bool) $value;
			case 'content':
				return $value;
			case 'array':
				foreach ( $value as $key => $val ) {
					$type          = gettype( $val );
					$value[ $key ] = $this->esc_data( $val, $type );
				}
				return $value;
			case 'object':
				$value = (array) $value;
				foreach ( $value as $key => $val ) {
					$type          = gettype( $val );
					$value[ $key ] = $this->esc_data( $val, $type );
				}
				return (object) $value;
			default:
				return false;
		}
	}
}
